edge#1(block#2->block#30): 1
edge#2(block#30->block#35): 998
edge#3(block#30->block#47): 1
edge#4(block#35->block#30): 998
edge#5(block#47->block#49): 1
edge#6(block#49->block#54): 998
edge#7(block#49->block#91): 1
edge#8(block#54->block#67): 168
edge#9(block#54->block#88): 830
edge#10(block#67->block#69): 168
edge#11(block#69->block#75): 1956
edge#12(block#69->block#88): 168
edge#13(block#75->block#69): 1956
edge#14(block#88->block#49): 998
edge#15(block#91->block#93): 1
edge#16(block#93->block#98): 998
edge#17(block#93->block#116): 1
edge#18(block#98->block#111): 168
edge#19(block#98->block#113): 830
edge#20(block#111->block#113): 168
edge#21(block#113->block#93): 998
    method main@2: i#-4:int j#-8:int is_prime#-12:List [entryblock#2]
    global n#32764:int
    instr 1: nop

Block#2  Preds:, Succs: 30, Idom: 2, Children: 30
    instr 2: entrypc
    instr 3: enter 12
    instr 4: (4) := add n_base#32764 GP
    instr 5: store 1000 (4)
    instr 6: (6) := add n_base#32764 GP
    instr 7: (7) := load (6)
    instr 8: (8) := newlist (7)
    instr 9: is_prime := (8)
    instr 10: (10) := checknull is_prime
    instr 11: checkbounds (10) 0
    instr 12: (12) := add (10) 8
    instr 13: (13) := mul 0 4
    instr 14: (14) := add (12) (13)
    instr 15: (15) := new Integer_type#8
    instr 16: (16) := add (15) value_offset#4
    instr 17: store 0 (16)
    instr 18: store (15) (14)
    instr 19: (19) := checknull is_prime
    instr 20: checkbounds (19) 1
    instr 21: (21) := add (19) 8
    instr 22: (22) := mul 1 4
    instr 23: (23) := add (21) (22)
    instr 24: (24) := new Integer_type#8
    instr 25: (25) := add (24) value_offset#4
    instr 26: store 0 (25)
    instr 27: store (24) (23)
    instr 28: i := 2

Block#30  Preds: 2 35, Succs: 35 47, Idom: 2, Children: 47 35
    instr 30: (29) := add n_base#32764 GP
    instr 31: (30) := load (30)
    instr 32: (31) := cmplt i (31)
    instr 33: blbc (32) [47]

Block#35  Preds: 30, Succs: 30, Idom: 30, Children:
    instr 35: (33) := checknull is_prime
    instr 36: checkbounds (35) i
    instr 37: (35) := add (35) 8
    instr 38: (36) := mul i 4
    instr 39: (37) := add (37) (38)
    instr 40: (38) := new Integer_type#8
    instr 41: (39) := add (40) value_offset#4
    instr 42: store 1 (41)
    instr 43: store (40) (39)
    instr 44: (42) := add i 1
    instr 45: i := (44)
    instr 46: br [30]

Block#47  Preds: 30, Succs: 49, Idom: 30, Children: 49
    instr 47: i := 2

Block#49  Preds: 47 88, Succs: 54 91, Idom: 47, Children: 91 54
    instr 49: (46) := add n_base#32764 GP
    instr 50: (47) := load (49)
    instr 51: (48) := cmplt i (50)
    instr 52: blbc (51) [91]

Block#54  Preds: 49, Succs: 67 88, Idom: 49, Children: 67 88
    instr 54: (50) := checknull is_prime
    instr 55: checkbounds (54) i
    instr 56: (52) := add (54) 8
    instr 57: (53) := mul i 4
    instr 58: (54) := add (56) (57)
    instr 59: (55) := load (58)
    instr 60: (56) := checknull (59)
    instr 61: (57) := checktype (60) Integer_type#8
    instr 62: (58) := add (61) value_offset#4
    instr 63: (59) := load (62)
    instr 64: (60) := cmpeq (63) 0
    instr 65: blbc (64) [67]

Block#88  Preds: 54 69, Succs: 49, Idom: 54, Children:
    instr 88: (81) := add i 1
    instr 89: i := (88)
    instr 90: br [49]

Block#67  Preds: 54, Succs: 69, Idom: 54, Children: 69
    instr 67: j := 2

Block#69  Preds: 67 75, Succs: 75 88, Idom: 67, Children: 75
    instr 69: (63) := mul i j
    instr 70: (64) := add n_base#32764 GP
    instr 71: (65) := load (70)
    instr 72: (66) := cmplt (69) (71)
    instr 73: blbc (72) [88]

Block#75  Preds: 69, Succs: 69, Idom: 69, Children:
    instr 75: (68) := mul i j
    instr 76: (69) := checknull is_prime
    instr 77: checkbounds (76) (75)
    instr 78: (71) := add (76) 8
    instr 79: (72) := mul (75) 4
    instr 80: (73) := add (78) (79)
    instr 81: (74) := new Integer_type#8
    instr 82: (75) := add (81) value_offset#4
    instr 83: store 0 (82)
    instr 84: store (81) (80)
    instr 85: (78) := add j 1
    instr 86: j := (85)
    instr 87: br [69]

Block#91  Preds: 49, Succs: 93, Idom: 49, Children: 93
    instr 91: i := 2

Block#93  Preds: 91 113, Succs: 98 116, Idom: 91, Children: 116 98
    instr 93: (85) := add n_base#32764 GP
    instr 94: (86) := load (93)
    instr 95: (87) := cmplt i (94)
    instr 96: blbc (95) [116]

Block#98  Preds: 93, Succs: 111 113, Idom: 93, Children: 111 113
    instr 98: (89) := checknull is_prime
    instr 99: checkbounds (98) i
    instr 100: (91) := add (98) 8
    instr 101: (92) := mul i 4
    instr 102: (93) := add (100) (101)
    instr 103: (94) := load (102)
    instr 104: (95) := checknull (103)
    instr 105: (96) := checktype (104) Integer_type#8
    instr 106: (97) := add (105) value_offset#4
    instr 107: (98) := load (106)
    instr 108: (99) := cmpeq (107) 0
    instr 109: blbc (108) [111]

Block#113  Preds: 98 111, Succs: 93, Idom: 98, Children:
    instr 113: (102) := add i 1
    instr 114: i := (113)
    instr 115: br [93]

Block#111  Preds: 98, Succs: 113, Idom: 98, Children:
    instr 111: write i
    instr 160: br [113]

Block#116  Preds: 93, Succs:, Idom: 93, Children:
    instr 116: wrl
    instr 117: ret 0
