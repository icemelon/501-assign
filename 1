    method main@2: i#-4:int j#-8:int is_prime#-12:List [entryblock#2]
    global n#32764:int
    instr 1: nop

Block#2  Preds:, Succs: 29, Idom: 2, Children: 29
    instr 2: entrypc
    instr 3: enter 12
    instr 4: (4) := add n_base#32764 GP
    instr 5: store 1000 (4)
    instr 6: (6) := add n_base#32764 GP
    instr 7: (7) := load (6)
    instr 8: (8) := newlist (7)
    instr 9: is_prime := (8)
    instr 10: (10) := checknull is_prime
    instr 11: checkbounds (10) 0
    instr 12: (12) := add (10) 8
    instr 13: (13) := mul 0 4
    instr 14: (14) := add (12) (13)
    instr 15: (15) := new Integer_type#8
    instr 16: (16) := add (15) value_offset#4
    instr 17: store 0 (16)
    instr 18: store (15) (14)
    instr 19: (19) := checknull is_prime
    instr 20: checkbounds (19) 1
    instr 21: (21) := add (19) 8
    instr 22: (22) := mul 1 4
    instr 23: (23) := add (21) (22)
    instr 24: (24) := new Integer_type#8
    instr 25: (25) := add (24) value_offset#4
    instr 26: store 0 (25)
    instr 27: store (24) (23)
    instr 28: i := 2

Block#29  Preds: 2 33, Succs: 33 45, Idom: 2, Children: 45 33
    instr 29: (29) := add n_base#32764 GP
    instr 30: (30) := load (29)
    instr 31: (31) := cmplt i (30)
    instr 32: blbc (31) [45]

Block#33  Preds: 29, Succs: 29, Idom: 29, Children:
    instr 33: (33) := checknull is_prime
    instr 34: checkbounds (33) i
    instr 35: (35) := add (33) 8
    instr 36: (36) := mul i 4
    instr 37: (37) := add (35) (36)
    instr 38: (38) := new Integer_type#8
    instr 39: (39) := add (38) value_offset#4
    instr 40: store 1 (39)
    instr 41: store (38) (37)
    instr 42: (42) := add i 1
    instr 43: i := (42)
    instr 44: br [29]

Block#45  Preds: 29, Succs: 46, Idom: 29, Children: 46
    instr 45: i := 2

Block#46  Preds: 45 81, Succs: 50 84, Idom: 45, Children: 84 50
    instr 46: (46) := add n_base#32764 GP
    instr 47: (47) := load (46)
    instr 48: (48) := cmplt i (47)
    instr 49: blbc (48) [84]

Block#50  Preds: 46, Succs: 62 81, Idom: 46, Children: 62 81
    instr 50: (50) := checknull is_prime
    instr 51: checkbounds (50) i
    instr 52: (52) := add (50) 8
    instr 53: (53) := mul i 4
    instr 54: (54) := add (52) (53)
    instr 55: (55) := load (54)
    instr 56: (56) := checknull (55)
    instr 57: (57) := checktype (56) Integer_type#8
    instr 58: (58) := add (57) value_offset#4
    instr 59: (59) := load (58)
    instr 60: (60) := cmpeq (59) 0
    instr 61: blbs (60) [81]

Block#62  Preds: 50, Succs: 63, Idom: 50, Children: 63
    instr 62: j := 2

Block#63  Preds: 62 68, Succs: 68 81, Idom: 62, Children: 68
    instr 63: (63) := mul i j
    instr 64: (64) := add n_base#32764 GP
    instr 65: (65) := load (64)
    instr 66: (66) := cmplt (63) (65)
    instr 67: blbc (66) [81]

Block#68  Preds: 63, Succs: 63, Idom: 63, Children:
    instr 68: (68) := mul i j
    instr 69: (69) := checknull is_prime
    instr 70: checkbounds (69) (68)
    instr 71: (71) := add (69) 8
    instr 72: (72) := mul (68) 4
    instr 73: (73) := add (71) (72)
    instr 74: (74) := new Integer_type#8
    instr 75: (75) := add (74) value_offset#4
    instr 76: store 0 (75)
    instr 77: store (74) (73)
    instr 78: (78) := add j 1
    instr 79: j := (78)
    instr 80: br [63]

Block#81  Preds: 50 63, Succs: 46, Idom: 50, Children:
    instr 81: (81) := add i 1
    instr 82: i := (81)
    instr 83: br [46]

Block#84  Preds: 46, Succs: 85, Idom: 46, Children: 85
    instr 84: i := 2

Block#85  Preds: 84 102, Succs: 89 105, Idom: 84, Children: 105 89
    instr 85: (85) := add n_base#32764 GP
    instr 86: (86) := load (85)
    instr 87: (87) := cmplt i (86)
    instr 88: blbc (87) [105]

Block#89  Preds: 85, Succs: 101 102, Idom: 85, Children: 101 102
    instr 89: (89) := checknull is_prime
    instr 90: checkbounds (89) i
    instr 91: (91) := add (89) 8
    instr 92: (92) := mul i 4
    instr 93: (93) := add (91) (92)
    instr 94: (94) := load (93)
    instr 95: (95) := checknull (94)
    instr 96: (96) := checktype (95) Integer_type#8
    instr 97: (97) := add (96) value_offset#4
    instr 98: (98) := load (97)
    instr 99: (99) := cmpeq (98) 0
    instr 100: blbs (99) [102]

Block#101  Preds: 89, Succs: 102, Idom: 89, Children:
    instr 101: write i

Block#102  Preds: 89 101, Succs: 85, Idom: 89, Children:
    instr 102: (102) := add i 1
    instr 103: i := (102)
    instr 104: br [85]

Block#105  Preds: 85, Succs:, Idom: 85, Children:
    instr 105: wrl
    instr 106: ret 0
